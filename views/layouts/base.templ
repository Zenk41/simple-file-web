package layouts

templ Base() {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<title>File Manager</title>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<link rel="stylesheet" href="/public/globals.css"/>
			// <script src="https://code.jquery.com/jquery-3.7.1.min.js" integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>
			<script src="/public/alpinejs" defer></script>
			<script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/js/all.min.js"></script>
			<script src="https://kit.fontawesome.com/f53f0c793d.js" crossorigin="anonymous"></script>
			<script src="/public/flowbite.min.js" defer></script>
			<link rel="icon" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>ğŸ’½</text></svg>"/>
		</head>
		<body class="flex flex-col min-h-screen antialiased">
			<div
				x-data="{ loading: false, setLoading(value) { this.loading = value; } }"
			>
				<!-- Loading Overlay -->
				<div
					x-show="loading"
					x-transition
					class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50"
				>
					<div class="flex items-center p-4 space-x-3 bg-white rounded-lg shadow-lg">
						<svg class="w-5 h-5 text-blue-500 animate-spin" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
							<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
							<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
						</svg>
						<span>Loading...</span>
					</div>
				</div>
				<!-- Page Content -->
				<div class="flex flex-col min-h-screen">
					{ children... }
				</div>
				<div
					x-data
					@notify.window="$store.alerts.add($event.detail.message, $event.detail.type)"
					role="region"
					aria-label="Notifications"
					class="fixed z-50 flex flex-col gap-2 bottom-4 right-4"
				>
					<template x-for="alert in $store.alerts.items" :key="alert.id">
						<div
							x-transition:enter="transition ease-out duration-300"
							x-transition:enter-start="opacity-0 transform translate-y-2"
							x-transition:enter-end="opacity-100 transform translate-y-0"
							x-transition:leave="transition ease-in duration-200"
							x-transition:leave-start="opacity-100 transform translate-y-0"
							x-transition:leave-end="opacity-0 transform translate-y-2"
							:class="{
                'flex items-center p-4 rounded-lg shadow-lg': true,
                'bg-red-50 text-red-800 dark:bg-red-900 dark:text-red-100': alert.type === 'error',
                'bg-blue-50 text-blue-800 dark:bg-blue-900 dark:text-blue-100': alert.type === 'info',
                'bg-green-50 text-green-800 dark:bg-green-900 dark:text-green-100': alert.type === 'success',
                'bg-yellow-50 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-100': alert.type === 'warning'
            }"
							role="alert"
						>
							<span x-text="alert.message" class="text-sm"></span>
							<button
								@click="$store.alerts.remove(alert.id)"
								class="ml-4 rounded hover:opacity-75 focus:outline-none focus:ring-2 focus:ring-offset-2"
								aria-label="Close alert"
							>
								<span aria-hidden="true">&times;</span>
							</button>
						</div>
					</template>
				</div>
			</div>
			<script>
            // Global function to set loading state
            window.setGlobalLoading = function(value) {
                const alpineRoot = document.querySelector('[x-data]');
                if (alpineRoot && alpineRoot.__x) {
                    alpineRoot.__x.$data.setLoading(value);
                }
            };
							// Alerts & How to use it
							// window.dispatchEvent(new CustomEvent('notify', { 
							// 		detail: { 
							// 				type: data.status, 
							// 				message: data.message 
							// 		}
							// }));
							// window.dispatchEvent(new CustomEvent('notify', { 
							// 		detail: { 
							// 				type: data.status, 
							// 				message: data.message + " : "+ data.error 
							// 		}
							// }));
						document.addEventListener('alpine:init', () => {
								Alpine.store('alerts', {
										items: [],
										
										add(message, type = 'info') {
												const id = Date.now()
												this.items.push({ id, message, type })
												
												// Auto cleanup
												setTimeout(() => {
														this.remove(id)
												}, 5000)
										},
										
										remove(id) {
												this.items = this.items.filter(alert => alert.id !== id)
										}
								})
						})
						
        </script>
		</body>
	</html>
}
