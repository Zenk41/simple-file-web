package views_auth

import (
	"github.com/Zenk41/simple-file-web/models"
	"github.com/Zenk41/simple-file-web/views/components"
	"github.com/Zenk41/simple-file-web/views/layouts"
)

templ Register(alert models.Alert) {
	@layouts.Base() {
		@components.Header(models.User{}, false)
		<main class="flex-grow max-w-4xl p-4 m-auto">
			<div class="max-w-sm p-5 mx-auto bg-white border border-gray-200 rounded-lg shadow-md">
				<h3 class="font-bold text-center text-md">Register Form</h3>
				<form
					x-data="{
          fields: {
						username: {
							value: '',
							loading: false,
							valid: false,
							error: '',
							validate() {
								this.loading = true;

								const validations = [
									{
										test: (u) => u.length > 3 || u.length < 10,
										message: 'Username must be between 3 and 10 characters long.',
										priority: 1
									},
									{
										test: (u) => /^[a-zA-Z0-9._-]+$/.test(u),
										message: 'Username can only contain letters, numbers, dots, underscores, or hyphens.',
										priority: 2
									},
								]
								setTimeout(() => {
									const failedValidation = validations
										.sort((a,b) => a.priority - b.priority)
										.find(v => !v.test(this.value));

									if (failedValidation) {
										this.error = failedValidation.message;
										this.valid = false;
									} else {
										this.error = '';
										this.valid = true;
									}
									this.loading = false;
								}, 500);
							}
						},
						email: {
							value: '',
							loading: false,
							valid: false,
							error: '',
							validate() {
								this.loading = true;
								const validations = [
									{
										test: (e) => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(e),
										message: 'Please enter a valid email address',
										priority: 1
									}
								];
								
								setTimeout(() => {
									const failedValidation = validations
										.sort((a, b) => a.priority - b.priority)
										.find(v => !v.test(this.value));
										
									if (failedValidation) {
										this.error = failedValidation.message;
										this.valid = false;
									} else {
										this.error = '';
										this.valid = true;
									}
									this.loading = false;
								}, 500);
							}
						},
						password: {
							value: '',
							loading: false,
							valid: false,
							error: '',
							show: false,
							validate() {
								this.loading = true;
								const validations = [
									{ test: (p) => p.length >= 8, message: 'Password must be at least 8 characters', priority: 1 },
									{ test: (p) => /\d/.test(p), message: 'Password must contain at least one number', priority: 2 },
									{ test: (p) => /[A-Z]/.test(p), message: 'Password must contain at least one uppercase letter', priority: 3 },
									{ test: (p) => /[!@#$%^&*]/.test(p), message: 'Password must contain at least one special character', priority: 4 }
								];
								
								setTimeout(() => {
									const failedValidation = validations
										.sort((a, b) => a.priority - b.priority)
										.find(v => !v.test(this.value));
										
									if (failedValidation) {
										this.error = failedValidation.message;
										this.valid = false;
									} else {
										this.error = '';
										this.valid = true;
									}
									this.loading = false;
								}, 500);
							}
						},
						confirmPassword: {
							value: '',
							loading: false,
							valid: false,
							error: '',
							show: false,
							validate() {
								this.loading = true;
								const validations = [
									{ test: (p) => p.length >= 8, message: 'Password must be at least 8 characters', priority: 1 },
									{ test: (p) => /\d/.test(p), message: 'Password must contain at least one number', priority: 2 },
									{ test: (p) => /[A-Z]/.test(p), message: 'Password must contain at least one uppercase letter', priority: 3 },
									{ test: (p) => /[!@#$%^&*]/.test(p), message: 'Password must contain at least one special character', priority: 4 }
								];
								setTimeout(() => {
									const failedValidation = validations
										.sort((a, b) => a.priority - b.priority)
										.find(v => !v.test(this.value));
										
									if (failedValidation) {
										this.error = failedValidation.message;
										this.valid = false;
									} else {
										this.error = '';
										this.valid = true;
									}
									this.loading = false;
								}, 500);
							}
						}
					},
					submitting: false,
					submitError: '',
					async handleSubmit() {
						if (this.isLoading || this.hasErrors || !this.isValid) return;
						
						this.submitting = true;
						this.submitError = '';
						
						setLoading(true);
						try {
							const response = await fetch('/api/auth/register', {
								method: 'POST',
								headers: {
									'Content-Type': 'application/json',
								},
								body: JSON.stringify({
									username: this.fields.username.value,
									email: this.fields.email.value,
									password: this.fields.password.value
								})
							});
							
							const data = await response.json();
							
							if (!response.ok) {
								throw new Error(data.message || 'Registration failed');
							}
							
							// Registration successful
							window.location.href = '/login';  // Redirect to login page
							
						} catch (error) {
							this.submitError = error.message || 'An error occurred during registration';
						} finally {
							this.submitting = false;
							setLoading(false);
						}
					},
					get isLoading() {
							return Object.values(this.fields).some(field => field.loading) || this.submitting;
					},
					get hasErrors() {
							return Object.values(this.fields).some(field => field.error);
					},
					get isValid() {
							return Object.values(this.fields).every(field => field.valid);
					},
        }"
					class="space-y-4"
					@submit.prevent="handleSubmit"
				>
					<!-- Username Field -->
					<div class="mb-6">
						<label for="username" class="block mb-2 text-sm font-medium text-gray-900">
							Username
						</label>
						<div class="relative">
							<input
								type="text"
								id="username"
								maxlength="10"
								x-model="fields.username.value"
								@input="fields.username.validate()"
								@blur="fields.username.validate()"
								class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-black focus:border-black block w-full p-2.5 pr-10"
								placeholder="dadang"
								required
							/>
							<div class="absolute transform -translate-y-1/2 right-2 top-1/2">
								<div
									x-show="fields.username.loading"
									class="w-4 h-4 border-2 border-black rounded-full animate-spin border-t-transparent"
								></div>
								<span
									x-show="!fields.username.loading && fields.username.valid"
									class="text-xl text-green-500"
								>✅</span>
								<span
									x-show="!fields.username.loading && fields.username.value && !fields.username.valid"
									class="text-xl text-red-500"
								>❌</span>
							</div>
						</div>
						<div
							x-show="fields.username.error"
							x-text="fields.username.error"
							class="mt-2 text-sm text-red-600"
						></div>
					</div>
					<!-- Email Field -->
					<div class="mb-6">
						<label for="email" class="block mb-2 text-sm font-medium text-gray-900">
							Email
						</label>
						<div class="relative">
							<input
								type="email"
								id="email"
								x-model="fields.email.value"
								@input="fields.email.validate()"
								@blur="fields.email.validate()"
								class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-black focus:border-black block w-full pl-2.5 pr-28 p-2.5"
								placeholder="example@domain.com"
								required
							/>
							<div class="absolute transform -translate-y-1/2 right-2 top-1/2">
								<div
									x-show="fields.email.loading"
									class="w-4 h-4 border-2 border-black rounded-full animate-spin border-t-transparent"
								></div>
								<span
									x-show="!fields.email.loading && fields.email.valid"
									class="text-xl text-green-500"
								>✅</span>
								<span
									x-show="!fields.email.loading && fields.email.value && !fields.email.valid"
									class="text-xl text-red-500"
								>❌</span>
							</div>
						</div>
						<div
							x-show="fields.email.error"
							x-text="fields.email.error"
							class="mt-2 text-sm text-red-600"
						></div>
					</div>
					<!-- Password Field -->
					<div class="mb-6">
						<label for="password" class="block mb-2 text-sm font-medium text-gray-900">
							Password
						</label>
						<div class="relative">
							<input
								:type="fields.password.show ? 'text' : 'password'"
								id="password"
								maxlength="10"
								x-model="fields.password.value"
								@input="fields.password.validate()"
								@blur="fields.password.validate()"
								class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-black focus:border-black block w-full pl-2.5 pr-28 p-2.5"
								placeholder="•••••••••"
								required
							/>
							<div class="absolute flex items-center -translate-y-1/2 right-12 top-1/2">
								<div
									x-show="fields.password.loading"
									class="w-4 h-4 border-2 border-black rounded-full animate-spin border-t-transparent"
								></div>
								<span
									x-show="!fields.password.loading && fields.password.valid"
									class="text-xl text-green-500"
								>✅</span>
								<span
									x-show="!fields.password.loading && fields.password.value && !fields.password.valid"
									class="text-xl text-red-500"
								>❌</span>
							</div>
							<button
								type="button"
								@click="fields.password.show = !fields.password.show"
								class="absolute p-1 -translate-y-1/2 rounded-full right-2 top-1/2 hover:bg-gray-100"
							>
								<span x-text="fields.password.show ? '🙈' : '👁️'" class="text-lg"></span>
							</button>
						</div>
						<div
							x-show="fields.password.error"
							x-text="fields.password.error"
							class="mt-2 text-sm text-red-600"
						></div>
					</div>
					<!-- Confirm Password Field -->
					<div class="mb-6">
						<label for="confirmPassword" class="block mb-2 text-sm font-medium text-gray-900">
							Confirm Password
						</label>
						<div class="relative">
							<input
								:type="fields.confirmPassword.show ? 'text' : 'password'"
								id="confirmPassword"
								maxlength="10"
								x-model="fields.confirmPassword.value"
								@input="fields.confirmPassword.validate()"
								@blur="fields.confirmPassword.validate()"
								class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-black focus:border-black block w-full p-2.5 pr-10"
								placeholder="•••••••••"
								required
							/>
							<button
								type="button"
								@click="fields.confirmPassword.show = !fields.confirmPassword.show"
								class="absolute p-1 -translate-y-1/2 rounded-full right-2 top-1/2 hover:bg-gray-100"
							>
								<span x-text="fields.confirmPassword.show ? '🙈' : '👁️'" class="text-lg"></span>
							</button>
							<div class="absolute flex items-center -translate-y-1/2 right-12 top-1/2">
								<div
									x-show="fields.confirmPassword.loading"
									class="w-4 h-4 border-2 border-black rounded-full animate-spin border-t-transparent"
								></div>
								<span
									x-show="!fields.confirmPassword.loading && fields.confirmPassword.valid"
									class="text-xl text-green-500"
								>✅</span>
								<span
									x-show="!fields.confirmPassword.loading && fields.confirmPassword.value && !fields.confirmPassword.valid"
									class="text-xl text-red-500"
								>❌</span>
							</div>
						</div>
						<div
							x-show="fields.confirmPassword.error"
							x-text="fields.confirmPassword.error"
							class="mt-2 text-sm text-red-600"
						></div>
					</div>
					<!-- Submit Error Message -->
					<div
						x-show="submitError"
						x-text="submitError"
						class="p-3 mb-4 text-sm text-red-700 bg-red-100 rounded-lg"
					></div>
					<!-- Submit Button -->
					<button
						type="submit"
						:disabled="isLoading || hasErrors || !isValid"
						:class="{'opacity-50 cursor-not-allowed': isLoading || hasErrors || !isValid}"
						class="w-full text-white bg-black hover:bg-gray-800 focus:ring-4 focus:outline-none focus:ring-gray-500 font-medium rounded-lg text-sm px-5 py-2.5"
					>
						<span x-show="!submitting">Register</span>
						<span x-show="submitting" class="flex items-center justify-center">
							<div class="w-4 h-4 mr-2 border-2 border-white rounded-full animate-spin border-t-transparent"></div>
							Registering...
						</span>
					</button>
				</form>
			</div>
		</main>
		@components.Footer()
		if alert.Type != "" {
			<div
				x-data
				x-init={ `$nextTick(() => {
        window.dispatchEvent(new CustomEvent('notify', { 
          detail: { 
            type: '`+alert.Type+`', 
            message: '`+alert.Message+`'
          }
        }));
            const url = new URL(window.location);
        			url.searchParams.delete('message');
			url.searchParams.delete('type');
        window.history.replaceState(null, '', url);

        // Remove this element from the DOM
        $el.remove();
      })` }
			></div>
		}
	}
}
