package views_auth

import (
	"github.com/Zenk41/simple-file-web/views/components"
	"github.com/Zenk41/simple-file-web/views/layouts"
)

templ Login() {
	@layouts.Base() {
		@components.Header()
		<main class="flex-grow max-w-4xl p-4 m-auto">
			<div class="max-w-sm p-5 mx-auto bg-white border border-gray-200 rounded-lg shadow-md">
				<h3 class="text-lg font-bold text-center">Login Form</h3>
				<form
					x-data="{
						email: '',
						password: '',
						showPassword: false,
						loading: false,
						emailValid: false,
						emailError: '',
						passwordError: '',
						validateEmail() {
								this.loading = true;
								// Simulate API call delay
								setTimeout(() => {
										const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
										if (!emailRegex.test(this.email)) {
												this.emailError = 'Please enter a valid email address';
												this.emailValid = false;
										} else {
												this.emailError = '';
												this.emailValid = true;
										}
										this.loading = false;
								}, 1000);
						},
						validatePassword() {
								if (this.password.length < 8) {
										this.passwordError = 'Password must be at least 8 characters';
								} else if (!/\d/.test(this.password)) {
										this.passwordError = 'Password must contain at least one number';
								} else if (!/[A-Z]/.test(this.password)) {
										this.passwordError = 'Password must contain at least one uppercase letter';
								} else {
										this.passwordError = '';
								}
						},
						async submitForm() {
								this.validateEmail();
								this.validatePassword();

								if (!this.emailError && !this.passwordError) {
										this.loading = true;
										try {
												const formData = new FormData();
												formData.append('email', this.email);
												formData.append('password', this.password);

												const response = await fetch('/auth/login', {
														method: 'POST',
														body: formData,
												});

												const data = await response.json();

												if (response.ok) {
														alert('Login successful: ' + data.message);
														window.location.href = data.redirect;
												} else {
														alert('Login failed: ' + data.message);
														window.location.href = data.redirect;
												}
										} catch (error) {
												alert('An error occurred: ' + error.message);
										} finally {
												this.loading = false;
										}
									}
								}
							}"
					@submit.prevent="submitForm()"
					class="space-y-4"
				>
					<div class="mb-6">
						<label for="email" class="block mb-2 text-sm font-medium text-gray-900">Email</label>
						<div class="relative">
							<input
								type="email"
								id="email"
								name="email"
								x-model="email"
								@input.debounce.1000ms="validateEmail()"
								class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 pr-10"
								placeholder="example@domain.com"
								required
							/>
							<div class="absolute transform -translate-y-1/2 right-2 top-1/2">
								<!-- Loading spinner -->
								<div
									x-show="loading"
									class="w-4 h-4 border-2 border-blue-500 rounded-full animate-spin border-t-transparent"
								></div>
								<!-- Checkmark when valid -->
								<span
									x-show="!loading && emailValid"
									class="text-xl text-green-500"
								>
									‚úÖ
								</span>
								<!-- Cross mark when invalid and touched -->
								<span
									x-show="!loading && email && !emailValid"
									class="text-xl text-red-500"
								>
									‚ùå
								</span>
							</div>
						</div>
						<div
							x-show="emailError"
							x-text="emailError"
							class="mt-2 text-sm text-red-600"
						></div>
					</div>
					<div class="mb-6">
						<label for="password" class="block mb-2 text-sm font-medium text-gray-900">Password</label>
						<div class="relative">
							<input
								:type="showPassword ? 'text' : 'password'"
								id="password"
								name="password"
								x-model="password"
								@input.debounce.1000ms="validatePassword()"
								class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 pr-10"
								placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
								required
							/>
							<button
								type="button"
								@click="showPassword = !showPassword"
								class="absolute inset-y-0 right-0 flex items-center pr-3"
							>
								<span x-text="showPassword ? 'üôà' : 'üëÅÔ∏è'" class="text-lg"></span>
							</button>
						</div>
						<div
							x-show="passwordError"
							x-text="passwordError"
							class="mt-2 text-sm text-red-600"
						></div>
					</div>
					<button
						type="submit"
						:disabled="loading || emailError || passwordError || !emailValid"
						:class="{'opacity-50 cursor-not-allowed': loading || emailError || passwordError || !emailValid}"
						class="w-full text-white bg-black hover:bg-gray-800 focus:ring-4 focus:outline-none focus:ring-gray-500 font-medium rounded-lg text-sm px-5 py-2.5"
					>
						<span x-show="!loading">Login</span>
						<span x-show="loading" class="flex items-center justify-center">
							<div class="w-4 h-4 mr-2 border-2 border-white rounded-full animate-spin border-t-transparent"></div>
						</span>
					</button>
				</form>
			</div>
		</main>
		@components.Footer()
	}
}
