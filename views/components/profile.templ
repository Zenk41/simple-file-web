package components

import "github.com/Zenk41/simple-file-web/models"

templ Profile(user models.User) {
	<main class="flex flex-col w-full gap-4 p-4 m-auto mt-8 mb-8 md:flex-row h-3/6">
		<!-- Profile Info Section - Left Side -->
		<div class="flex-1 p-5 bg-white border border-gray-200 rounded-lg shadow-md">
			<div class="mb-6">
				<div class="mb-4">
					<h2 class="mb-4 text-xl font-semibold">Profile Information</h2>
					<div class="space-y-2">
						<div class="flex items-center">
							<span class="w-24 font-medium">Username:</span>
							<span>{ user.Username }</span>
						</div>
						<div class="flex items-center">
							<span class="w-24 font-medium">Email:</span>
							<span>{ user.Email }</span>
						</div>
					</div>
				</div>
			</div>
		</div>
		<!-- 2FA Section - Right Side -->
		<div
			class="flex-1 p-5 bg-white border border-gray-200 rounded-lg shadow-md"
			x-data="{ 
        isOpen: false,
        loading: false,
        authCode: '',
        otp_auth_url: '',
        base32: '',
        error: '',
        success: '',
        valid: false,
        generateQRCode(text) {
            // Create instance of qrcode
            var qr = qrcode(0, 'M'); // 0 for auto-sizing, 'M' for medium error correction
            
            // Add the data
            qr.addData(text);
            qr.make();
            
            // Create SVG tag
            return qr.createSvgTag({ 
                cellSize: 4,  // Size of each QR cell
                margin: 4     // Margin around the QR code
            });
        },
        async handleModal() {
					
            this.loading = true;
            try {
                const response = await fetch('/api/auth/otp/generate', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                const data = await response.json();

                if (!response.ok) {
                    this.error = data.error;
                    this.valid = false;
                } else {
                    this.otp_auth_url = data.otp_auth_url;
                    this.base32 = data.base32;
                    this.error = '';
                    this.valid = true;
                    
                    // Generate QR code after data is received
                    this.$nextTick(() => {
                        const qrcodeDiv = document.getElementById('qrcode');
                        if (qrcodeDiv && this.otp_auth_url) {
                            qrcodeDiv.innerHTML = this.generateQRCode(this.otp_auth_url);
                        }
                    });
										this.isOpen = true;
                }
                
            } catch (error) {
                this.error = error.message;
                this.valid = false;
            } finally {
                this.loading = false;
            }
        },
        closeModal() {
            this.isOpen = false;
            this.authCode = '';
            this.error = '';
            this.success = '';
            this.otpauth_url = '';
            this.base32 = '';
            const qrcodeDiv = document.getElementById('qrcode');
            if (qrcodeDiv) qrcodeDiv.innerHTML = '';
        },
        async verifyCode() {
            if (!this.authCode) return;
            
            this.loading = true;
            try {
                const response = await fetch('/api/auth/otp/verify', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ 
                        token: this.authCode,
                    })
                });

                const data = await response.json();

                if (!response.ok) {
                    this.error = data.error;
                } else {
                    this.success = '2FA has been successfully activated!';
                    setTimeout(() => this.closeModal(), 2000);
										const url = new URL(window.location.href);
										url.searchParams.append('message',  this.success);
										url.searchParams.append('type', 'success');
										window.location.href = url.toString();
                }
            } catch (error) {
                this.error = error.message;
								window.dispatchEvent(new CustomEvent('notify', { 
									detail: { 
										type: 'error', // Explicitly set error type
										message: error.message || 'Delete operation failed'
									}
								}));
            } finally {
                this.loading = false;
            }
        }
    }"
		>
			<!-- Your existing header section -->
			<div class="sticky top-0 flex items-center justify-between mb-4 bg-white">
				if !user.OtpEnabled {
					<div>
						<h3 class="mb-3 text-lg font-semibold">Two-Factor Authentication</h3>
						<div class="flex items-center space-x-4">
							<button
								type="button"
								@click="handleModal"
								class="px-4 py-2 text-white bg-black rounded-md hover:bg-slate-700 focus:outline-none focus:ring-2 focus:ring-black"
							>
								Enable 2FA
							</button>
						</div>
					</div>
					<!-- Modal Backdrop -->
					<div
						x-show="isOpen"
						x-transition:enter="transition ease-out duration-300"
						x-transition:enter-start="opacity-0"
						x-transition:enter-end="opacity-100"
						x-transition:leave="transition ease-in duration-200"
						x-transition:leave-start="opacity-100"
						x-transition:leave-end="opacity-0"
						class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50"
						style="display: none;"
					>
						<!-- Modal Content -->
						<div
							@click.away="closeModal()"
							x-show="isOpen"
							x-transition:enter="transition ease-out duration-300"
							x-transition:enter-start="opacity-0 transform scale-90"
							x-transition:enter-end="opacity-100 transform scale-100"
							x-transition:leave="transition ease-in duration-200"
							x-transition:leave-start="opacity-100 transform scale-100"
							x-transition:leave-end="opacity-0 transform scale-90"
							class="w-full max-w-md mx-3 bg-white rounded-lg shadow-xl"
						>
							<form class="p-4 space-y-4" @submit.prevent="verifyCode">
								<!-- Header -->
								<h1 class="text-lg font-semibold text-gray-800">Two-Factor Authentication (2FA)</h1>
								<!-- Instructions -->
								<div>
									<h2 class="mb-1 text-sm font-medium text-slate-600">Setup Instructions</h2>
									<ol class="ml-4 space-y-0.5 text-sm text-gray-600 list-decimal">
										<li>Install Google Authenticator or Authy</li>
										<li>Open app, tap "+" icon</li>
										<li>Scan the QR code below</li>
									</ol>
								</div>
								<!-- QR Code Section -->
								<div>
									<h2 class="mb-1 text-sm font-medium text-slate-600">Scan QR Code</h2>
									<div class="flex justify-center p-2 bg-white">
										<div id="qrcode" class="inline-block"></div>
									</div>
								</div>
								<!-- Manual Code Section -->
								<div>
									<h2 class="mb-1 text-sm font-medium text-slate-600">Manual Code</h2>
									<p class="font-mono text-xs text-gray-600 break-all" x-text="'Secret Key: ' + base32 + ' (Base32 encoded)'"></p>
								</div>
								<!-- Verification Section -->
								<div>
									<h2 class="mb-1 text-sm font-medium text-slate-600">Verify Code</h2>
									<input
										type="text"
										x-model="authCode"
										:disabled="loading"
										class="w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-slate-500 disabled:bg-gray-100 disabled:cursor-not-allowed"
										placeholder="Enter authentication code"
										required
									/>
								</div>
								<!-- Error Message -->
								<div x-show="error" class="text-xs text-red-600" x-text="error"></div>
								<!-- Success Message -->
								<div x-show="success" class="text-xs text-green-600" x-text="success"></div>
								<!-- Buttons -->
								<div class="flex justify-between pt-2">
									<button
										type="button"
										@click="closeModal"
										:disabled="loading"
										class="px-3 py-1.5 text-sm text-gray-600 hover:text-gray-800 disabled:opacity-50 disabled:cursor-not-allowed"
									>
										Close
									</button>
									<button
										type="submit"
										:disabled="loading || !authCode"
										class="flex items-center px-3 py-1.5 space-x-1 text-sm text-white rounded-md bg-slate-600 hover:bg-slate-700 focus:outline-none focus:ring-2 focus:ring-slate-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed"
									>
										<span x-text="loading ? 'Verifying...' : 'Verify & Activate'"></span>
										<svg x-show="loading" class="w-3 h-3 animate-spin" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
											<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
											<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
										</svg>
									</button>
								</div>
							</form>
						</div>
					</div>
				} else {
					<div
						x-data="{ isLoading: false, async handleDisable2FA() {
							this.isLoading = true;
							try {
								const response = await fetch('/api/auth/otp/disable', {
									method: 'POST',
									headers: { 'Content-Type': 'application/json' },
								});

								const data = await response.json();
								
								if (response.ok) {
									const url = new URL(window.location.href);
									url.searchParams.append('message', data.user.message);
									url.searchParams.append('type', 'success');
									window.location.href = url.toString();
								} else {
									window.dispatchEvent(new CustomEvent('notify', { 
									detail: { 
										type: 'success', // Explicitly set error type
										message: error.message || 'Delete operation failed'
									}
								}));
								}
							} catch (error) {
								window.dispatchEvent(new CustomEvent('notify', { 
									detail: { 
										type: 'error', // Explicitly set error type
										message: data.message || 'Delete operation failed'
									}
								}));
							} finally {
								this.isLoading = false;
							}
						} }"
					>
						<h3 class="mb-3 text-lg font-semibold">Two-Factor Authentication</h3>
						<div class="flex items-center space-x-4">
							<button
								type="button"
								x-on:click="handleDisable2FA"
								:disabled="isLoading"
								class="px-4 py-2 text-white bg-black rounded-md hover:bg-slate-700 focus:outline-none focus:ring-2 focus:ring-black"
								:class="{ 'opacity-50 cursor-not-allowed': isLoading }"
							>
								<span x-show="!isLoading">Disable 2FA</span>
								<span x-show="isLoading">Disabling...</span>
							</button>
						</div>
					</div>
				}
			</div>
		</div>
	</main>
}
