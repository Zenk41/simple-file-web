package components

import (
	"fmt"
	"github.com/Zenk41/simple-file-web/models"
	"strconv"
)

templ PublicLinkList(currentLinks []models.PublicLink, currentPage int, startIndex int, endIndex int, totalPages int, totalItems int) {
	<main class="flex-grow w-full max-w-5xl p-4 mx-auto space-y-4">
		<div class="bg-white border border-gray-200 rounded-lg shadow-md">
			<!-- Desktop view -->
			<div class="hidden overflow-x-auto md:block">
				<table class="w-full">
					<thead>
						<tr class="border-b border-gray-100">
							<th class="px-4 py-3 text-xs font-medium text-left text-gray-500">ID</th>
							<th class="px-4 py-3 text-xs font-medium text-left text-gray-500">Link</th>
							<th class="px-4 py-3 text-xs font-medium text-left text-gray-500">Bucket</th>
							<th class="px-4 py-3 text-xs font-medium text-left text-gray-500">Path</th>
							<th class="px-4 py-3 text-xs font-medium text-left text-gray-500">Created</th>
							<th class="px-4 py-3 text-xs font-medium text-left text-gray-500">Updated</th>
							<th class="px-4 py-3 text-xs font-medium text-left text-gray-500">Actions</th>
						</tr>
					</thead>
					<tbody class="divide-y divide-gray-50">
						for _, link := range currentLinks {
							<tr class="transition-colors hover:bg-gray-50/50">
								<td class="px-4 py-3 text-sm text-gray-600">{ link.ID }</td>
								<td class="px-4 py-3">
									<a href={ templ.SafeURL("/p/" + link.Link) } class="text-sm text-gray-600 hover:text-black text-bold">
										{ link.Link }
									</a>
								</td>
								<td class="px-4 py-3 text-sm text-gray-600">{ link.RealRootBucket }</td>
								<td class="px-4 py-3 text-sm text-gray-600">{ link.RealRootPath }</td>
								<td class="px-4 py-3 text-sm text-gray-600 whitespace-nowrap">{ link.CreatedAt.Format("Jan 02, 2006") }</td>
								<td class="px-4 py-3 text-sm text-gray-600 whitespace-nowrap">{ link.UpdatedAt.Format("Jan 02, 2006") }</td>
								<td class="px-4 py-3">
									<div class="flex items-center gap-2">
										@PublicLinkEdit()
										@PublicLinkDelete()
									</div>
								</td>
							</tr>
						}
					</tbody>
				</table>
			</div>
			<!-- Mobile/Tablet view -->
			<div class="divide-y divide-gray-100 md:hidden">
				for _, link := range currentLinks {
					<div class="p-4 space-y-3">
						<div class="flex items-center justify-between">
							<span class="text-sm font-medium text-gray-500">ID</span>
							<span class="text-sm text-gray-600">{ link.ID }</span>
						</div>
						<div class="flex items-center justify-between">
							<span class="text-sm font-medium text-gray-500">Link</span>
							<a href={ templ.SafeURL("/p/" + link.Link) } class="text-sm text-gray-600 hover:text-black text-bold">
								{ link.Link }
							</a>
						</div>
						<div class="flex items-center justify-between">
							<span class="text-sm font-medium text-gray-500">Bucket</span>
							<span class="text-sm text-gray-600">{ link.RealRootBucket }</span>
						</div>
						<div class="flex items-center justify-between">
							<span class="text-sm font-medium text-gray-500">Path</span>
							<span class="text-sm text-right text-gray-600">{ link.RealRootPath }</span>
						</div>
						<div class="flex items-center justify-between">
							<span class="text-sm font-medium text-gray-500">Created</span>
							<span class="text-sm text-gray-600">{ link.CreatedAt.Format("Jan 02, 2006") }</span>
						</div>
						<div class="flex items-center justify-between">
							<span class="text-sm font-medium text-gray-500">Updated</span>
							<span class="text-sm text-gray-600">{ link.UpdatedAt.Format("Jan 02, 2006") }</span>
						</div>
						<div class="flex justify-end gap-2 pt-2">
							@PublicLinkEdit()
							@PublicLinkDelete()
						</div>
					</div>
				}
			</div>
		</div>
		<!-- Pagination -->
		if totalPages > 1 {
			<div class="flex items-center justify-between px-4 py-3 bg-white border border-gray-200 rounded-lg sm:px-6">
				<!-- Mobile pagination -->
				<div class="flex justify-between w-full sm:hidden">
					if currentPage > 1 {
						<a
							href={ templ.SafeURL(fmt.Sprintf("?page=%d", currentPage-1)) }
							class="relative inline-flex items-center px-4 py-2 text-sm font-medium text-gray-700 bg-white rounded-md hover:bg-gray-50"
						>
							Previous
						</a>
					} else {
						<span class="relative inline-flex items-center px-4 py-2 text-sm font-medium text-gray-500 bg-gray-100 rounded-md cursor-not-allowed">
							Previous
						</span>
					}
					if currentPage < totalPages {
						<a
							href={ templ.SafeURL(fmt.Sprintf("?page=%d", currentPage+1)) }
							class="relative inline-flex items-center px-4 py-2 text-sm font-medium text-gray-700 bg-white rounded-md hover:bg-gray-50"
						>
							Next
						</a>
					} else {
						<span class="relative inline-flex items-center px-4 py-2 text-sm font-medium text-gray-500 bg-gray-100 rounded-md cursor-not-allowed">
							Next
						</span>
					}
				</div>
				<!-- Desktop pagination -->
				<div class="hidden sm:flex sm:flex-1 sm:items-center sm:justify-between">
					<div>
						<p class="text-sm text-gray-700">
							Showing 
							<span class="font-medium">{ strconv.Itoa(startIndex + 1) }</span>
							{ " " } to { " " }
							<span class="font-medium">{ strconv.Itoa(endIndex) }</span>
							{ " " } of { " " }
							<span class="font-medium">{ strconv.Itoa(totalItems) }</span>
							{ " " } results
						</p>
					</div>
					<div>
						<nav class="inline-flex -space-x-px rounded-md shadow-sm isolate" aria-label="Pagination">
							<!-- Previous button -->
							if currentPage > 1 {
								<a
									href={ templ.SafeURL(fmt.Sprintf("?page=%d", currentPage-1)) }
									class="relative inline-flex items-center px-2 py-2 text-gray-500 bg-white border border-gray-300 rounded-l-md hover:bg-gray-50"
								>
									<span class="sr-only">Previous</span>
									<svg class="w-5 h-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
										<path fill-rule="evenodd" d="M12.79 5.23a.75.75 0 01-.02 1.06L8.832 10l3.938 3.71a.75.75 0 11-1.04 1.08l-4.5-4.25a.75.75 0 010-1.08l4.5-4.25a.75.75 0 011.06.02z" clip-rule="evenodd"></path>
									</svg>
								</a>
							} else {
								<span class="relative inline-flex items-center px-2 py-2 text-gray-300 bg-gray-100 border border-gray-300 cursor-not-allowed rounded-l-md">
									<span class="sr-only">Previous</span>
									<svg class="w-5 h-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
										<path fill-rule="evenodd" d="M12.79 5.23a.75.75 0 01-.02 1.06L8.832 10l3.938 3.71a.75.75 0 11-1.04 1.08l-4.5-4.25a.75.75 0 010-1.08l4.5-4.25a.75.75 0 011.06.02z" clip-rule="evenodd"></path>
									</svg>
								</span>
							}
							<!-- Page numbers -->
							for i := 1; i <= totalPages; i++ {
								if i == currentPage {
									<span
										class="relative z-10 inline-flex items-center px-4 py-2 text-sm font-semibold text-white bg-black border border-black"
									>
										{ strconv.Itoa(i) }
									</span>
								} else {
									<a
										href={ templ.SafeURL(fmt.Sprintf("?page=%d", i)) }
										class="relative inline-flex items-center px-4 py-2 text-sm font-semibold text-gray-900 bg-white border border-gray-300 hover:bg-gray-50"
									>
										{ strconv.Itoa(i) }
									</a>
								}
							}
							<!-- Next button -->
							if currentPage < totalPages {
								<a
									href={ templ.SafeURL(fmt.Sprintf("?page=%d", currentPage+1)) }
									class="relative inline-flex items-center px-2 py-2 text-gray-500 bg-white border border-gray-300 rounded-r-md hover:bg-gray-50"
								>
									<span class="sr-only">Next</span>
									<svg class="w-5 h-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
										<path fill-rule="evenodd" d="M7.21 14.77a.75.75 0 01.02-1.06L11.168 10 7.23 6.29a.75.75 0 111.04-1.08l4.5 4.25a.75.75 0 010 1.08l-4.5 4.25a.75.75 0 01-1.06-.02z" clip-rule="evenodd"></path>
									</svg>
								</a>
							} else {
								<span class="relative inline-flex items-center px-2 py-2 text-gray-300 bg-gray-100 border border-gray-300 cursor-not-allowed rounded-r-md">
									<span class="sr-only">Next</span>
									<svg class="w-5 h-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
										<path fill-rule="evenodd" d="M7.21 14.77a.75.75 0 01.02-1.06L11.168 10 7.23 6.29a.75.75 0 111.04-1.08l4.5 4.25a.75.75 0 010 1.08l-4.5 4.25a.75.75 0 01-1.06-.02z" clip-rule="evenodd"></path>
									</svg>
								</span>
							}
						</nav>
					</div>
				</div>
			</div>
		}
	</main>
}

// Helper function for min value
func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

templ PublicLinkItem(link models.PublicLink) {
	<tr class="transition-colors group hover:bg-gray-50/50">
		<td class="px-6 py-4 text-sm text-center text-gray-600 truncate">{ link.ID }</td>
		<td class="px-6 py-4 text-center truncate">
			<a href={ templ.SafeURL("/p/" + link.Link) } class="text-sm text-gray-600 transition-colors hover:text-black">
				{ link.Link }
			</a>
		</td>
		<td class="px-6 py-4 text-sm text-center text-gray-600 truncate">{ link.RealRootBucket }</td>
		<td class="px-6 py-4 text-sm text-center text-gray-600 truncate">{ link.RealRootPath }</td>
		<td class="px-6 py-4 text-sm text-center text-gray-600 whitespace-nowrap">{ link.CreatedAt.Format("Jan 02, 2006") }</td>
		<td class="px-6 py-4 text-sm text-center text-gray-600 whitespace-nowrap">{ link.UpdatedAt.Format("Jan 02, 2006") }</td>
		<td class="px-6 py-4 text-center">
			<div class="flex items-center justify-center gap-2">
				@PublicLinkEdit()
				@PublicLinkDelete()
			</div>
		</td>
	</tr>
}

templ PublicLinkEdit() {
	<div x-data="{ isOpen: false }">
		<!-- Trigger Button -->
		<button
			@click="isOpen = true"
			class="p-1.5 rounded-lg text-gray-400 hover:text-black hover:bg-black transition-all"
		>
			<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
			</svg>
		</button>
		<!-- Modal Backdrop -->
		<div
			x-show="isOpen"
			x-transition:enter="transition ease-out duration-300"
			x-transition:enter-start="opacity-0"
			x-transition:enter-end="opacity-100"
			x-transition:leave="transition ease-in duration-200"
			x-transition:leave-start="opacity-100"
			x-transition:leave-end="opacity-0"
			class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50"
			style="display: none;"
		>
			<!-- Modal Content -->
			<div
				@click.away="isOpen = false"
				x-show="isOpen"
				x-transition:enter="transition ease-out duration-300"
				x-transition:enter-start="opacity-0 transform scale-90"
				x-transition:enter-end="opacity-100 transform scale-100"
				x-transition:leave="transition ease-in duration-200"
				x-transition:leave-start="opacity-100 transform scale-100"
				x-transition:leave-end="opacity-0 transform scale-90"
				class="w-full max-w-md p-6 mx-4 bg-white rounded-lg shadow-xl"
			>
				<!-- Modal Header -->
				<div class="flex items-center justify-between mb-4">
					<h3 class="text-lg font-semibold text-gray-900">Modal Title</h3>
					<button
						@click="isOpen = false"
						class="text-gray-400 transition duration-200 hover:text-gray-600"
					>
						<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
						</svg>
					</button>
				</div>
				<!-- Modal Body -->
				<div class="mb-4 text-gray-600">
					<p>This is the modal content. You can put any HTML content here.</p>
				</div>
				<!-- Modal Footer -->
				<div class="flex justify-end space-x-2">
					<button
						@click="isOpen = false"
						class="px-4 py-2 font-medium text-gray-500 transition duration-200 rounded-lg hover:text-gray-700"
					>
						Cancel
					</button>
					<button
						@click="isOpen = false"
						class="px-4 py-2 font-medium text-white transition duration-200 bg-black rounded-lg hover:bg-black"
					>
						Confirm
					</button>
				</div>
			</div>
		</div>
	</div>
}

templ PublicLinkDelete() {
	<div x-data="{ isOpen: false }">
		<!-- Trigger Button -->
		<button
			@click="isOpen = true"
			class="p-1.5 rounded-lg text-gray-400 hover:text-red-500 hover:bg-red-50 transition-all"
		>
			<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
			</svg>
		</button>
		<!-- Modal Backdrop -->
		<div
			x-show="isOpen"
			x-transition:enter="transition ease-out duration-300"
			x-transition:enter-start="opacity-0"
			x-transition:enter-end="opacity-100"
			x-transition:leave="transition ease-in duration-200"
			x-transition:leave-start="opacity-100"
			x-transition:leave-end="opacity-0"
			class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50"
			style="display: none;"
		>
			<!-- Modal Content -->
			<div
				@click.away="isOpen = false"
				x-show="isOpen"
				x-transition:enter="transition ease-out duration-300"
				x-transition:enter-start="opacity-0 transform scale-90"
				x-transition:enter-end="opacity-100 transform scale-100"
				x-transition:leave="transition ease-in duration-200"
				x-transition:leave-start="opacity-100 transform scale-100"
				x-transition:leave-end="opacity-0 transform scale-90"
				class="w-full max-w-md p-6 mx-4 bg-white rounded-lg shadow-xl"
			>
				<!-- Modal Header -->
				<div class="flex items-center justify-between mb-4">
					<h3 class="text-lg font-semibold text-gray-900">Modal Title</h3>
					<button
						@click="isOpen = false"
						class="text-gray-400 transition duration-200 hover:text-gray-600"
					>
						<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
						</svg>
					</button>
				</div>
				<!-- Modal Body -->
				<div class="mb-4 text-gray-600">
					<p>This is the modal content. You can put any HTML content here.</p>
				</div>
				<!-- Modal Footer -->
				<div class="flex justify-end space-x-2">
					<button
						@click="isOpen = false"
						class="px-4 py-2 font-medium text-gray-500 transition duration-200 rounded-lg hover:text-gray-700"
					>
						Cancel
					</button>
					<button
						@click="isOpen = false"
						class="px-4 py-2 font-medium text-white transition duration-200 bg-black rounded-lg hover:bg-black"
					>
						Confirm
					</button>
				</div>
			</div>
		</div>
	</div>
}

templ PublikLinkCreate() {
	<div x-data="{ isOpen: false }">
		<!-- Trigger Button -->
		<button
			@click="isOpen = true"
			class="p-1.5 rounded-lg text-gray-400 hover:text-red-500 hover:bg-red-50 transition-all"
		>
			<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
			</svg>
		</button>
		<!-- Modal Backdrop -->
		<div
			x-show="isOpen"
			x-transition:enter="transition ease-out duration-300"
			x-transition:enter-start="opacity-0"
			x-transition:enter-end="opacity-100"
			x-transition:leave="transition ease-in duration-200"
			x-transition:leave-start="opacity-100"
			x-transition:leave-end="opacity-0"
			class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50"
			style="display: none;"
		>
			<!-- Modal Content -->
			<div
				@click.away="isOpen = false"
				x-show="isOpen"
				x-transition:enter="transition ease-out duration-300"
				x-transition:enter-start="opacity-0 transform scale-90"
				x-transition:enter-end="opacity-100 transform scale-100"
				x-transition:leave="transition ease-in duration-200"
				x-transition:leave-start="opacity-100 transform scale-100"
				x-transition:leave-end="opacity-0 transform scale-90"
				class="w-full max-w-md p-6 mx-4 bg-white rounded-lg shadow-xl"
			>
				<!-- Modal Header -->
				<div class="flex items-center justify-between mb-4">
					<h3 class="text-lg font-semibold text-gray-900">Modal Title</h3>
					<button
						@click="isOpen = false"
						class="text-gray-400 transition duration-200 hover:text-gray-600"
					>
						<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
						</svg>
					</button>
				</div>
				<!-- Modal Body -->
				<div class="mb-4 text-gray-600">
					<p>This is the modal content. You can put any HTML content here.</p>
				</div>
				<!-- Modal Footer -->
				<div class="flex justify-end space-x-2">
					<button
						@click="isOpen = false"
						class="px-4 py-2 font-medium text-gray-500 transition duration-200 rounded-lg hover:text-gray-700"
					>
						Cancel
					</button>
					<button
						@click="isOpen = false"
						class="px-4 py-2 font-medium text-white transition duration-200 bg-black rounded-lg hover:bg-black"
					>
						Confirm
					</button>
				</div>
			</div>
		</div>
	</div>
}
